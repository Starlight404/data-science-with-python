######## data analysis with python ###########


## a dataset to be analyzed in python######
## overview of python package for data analysis ######
## basic insights from the dataset
'''
How can we help Tom determine the best price for his car?
Let's think like data scientists and clearly define some of his problems:
For example, is there data on the prices of other cars and their characteristics?
What features of cars affect their prices?
Colour?
Brand?
Does horsepower also affect the selling price, or perhaps, something else?
As a data analyst or data scientist, these are some of the questions we can start thinking
about.''' 
##### first project [predicting prices on used cars] ###

import pandas as pd
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/autos/imports-85.data"
df = pd.read_csv(url, header = None)

headers = ["symboling","normalized-loss","make","fuel-tyoe","aspiration","num-of-doors","body-styles","drive-wheels","engine-location","wheel-base","length","width","height","curb-weight","engine-type","number-of-cylinders","engine-size","fuel-system","bore","storke","compression-ratio","horsepower","peak-Rpm","city-mpg","highway-mpg","price"]
df.columns = headers
x = df.head(5)
print(x)
path = "C://Users//Rahul//OneDrive//Desktop//data science 101//python file//autombole.csv"
df.to_csv(path)

## how to handle with missing values #####











# df["symboling"]=df["symboling"]+1
# y = df["body-styles"]## for accessing coloumns 


# y = df.dtypes
# print(y)
# z = df.describe()### for statistical summery
# z = df.describe(include="all") unique, top, freq
# z = df.info()
# print(z)
'''
The statistical metrics can tell the data scientist if there are mathematical issues
that may exist, such as extreme outliers and large deviations.
The data scientist may have to address these issues later.
To get the quick statistics, we use the describe method.
It returns the number of terms in the column as
"count", average column value as "mean",
column standard deviation as "std", the maximum and minimum values,
as well as the boundary of each of the quartiles.
By default, the dataframe.describe() function skips rows and columns that do not contain
numbers.
It is possible to make the describe method work for object-type columns as well.
To enable a summary of all the columns, we could add an argument include = "all" inside
the describe function bracket.
Now the outcome shows the summary of all the 26 columns, including object-typed attributes.
We see that for object-type columns, a different set of statistics is evaluated, like unique,
top and frequency.
"Unique" is the number of distinct objects in the column, "top" is the most frequently
occurring object, and "freq" is the number of times the top object appears in the column.
Some values in the table are shown here as "NaN", which stands for "not a number".
This is because that particular statistical metric cannot be calculated for that specific
column data type.
Another method you can use to check your dataset is the dataframe.info function.
This function shows the top 30 rows and bottom 30 rows of the dataframe.'''
##### it says here the bore should be in numeric this has to be corrected #######
# x = df.head(10)
# print(x)
# y = df.tail(10)
# print(y)
### we are going check data types , data distribution, locate potential issues with the data ###
'''
to check info and type mismatch 
compability with python methods'''

### data preprocessing #####
### the process of converting or mapping data from the intial raw from into another formart, in orfer to prepare the data for further analysis.
### this is called data cleaning or wranging####

###### learning objective ########
## identify and missing values
### data formating
## data normalization
## data binning
## turning categorical values to numeric variables

