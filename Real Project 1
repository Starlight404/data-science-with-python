## q-1 what was the best month for sales? how much was the earned that month?
import pandas as pd
## merge  the 12 months sales into a single csv file
import os
df = pd.read_csv("./Sales_Data/Sales_April_2019.csv")
files = [file for file in os.listdir('./Sales_Data')]
all_months_data = pd.DataFrame()
for file in files:
    df = pd.read_csv("./Sales_Data/"+file)
    all_months_data = pd.concat([all_months_data,df])
all_months_data.to_csv("all_data.csv", index= False)    
all_data = pd.read_csv("all_data.csv")
all_data.head()
### clean up the data
### drop rows of Nan
nan_df = all_data[all_data.isna().any(axis=1)]
nan_df.head()
all_data = all_data.dropna(how='all')
all_data.head()
## find or and Delete it
all_data = all_data[all_data['Order Date'].str[0:2]!='Or']
### convert coloumns to the correct types
all_data['Quantity Ordered']= pd.to_numeric(all_data['Quantity Ordered']) #make int
all_data['Price Each']= pd.to_numeric(all_data['Price Each'])
#Augment data with additional coloumns
## Task 2: add month coloumn
all_data['Month'] = all_data['Order Date'].str[0:2]
all_data['Month'] = all_data['Month'].astype('int32')
all_data.head()
## task 3 : add a sales column
all_data['Sales'] = all_data['Quantity Ordered']* all_data['Price Each']
all_data.head()
# Task: 4 add a city coloumn
### lets use apply()
def get_city(address):
    return address.split(',')[1]
def get_state(address):
    return address.split(',')[2].split(' ')[1]
all_data['City'] = all_data['Purchase Address'].apply(lambda x: f"{get_city(x)}({get_state(x)})")
all_data.head()
## q-1 what was the best month for sales? how much was the earned that month?
results = all_data.groupby('Month').sum()
#### data visualizing
import matplotlib.pyplot as plt
months = range(1,13)
plt.bar(months,results['Sales'])
plt.ylabel('Sales in USD($)')
plt.xlabel('Month number')
plt.show()
#### question 2: What Us city had the highest number of sales
results = all_data.groupby('City').sum()
results
#### data visualizing
import matplotlib.pyplot as plt
cities = [city for city, df in all_data.groupby('City')]
plt.bar(cities,results['Sales'])
plt.xticks(cities,rotation= 'vertical',size = 8)
plt.ylabel('Sales in USD($)')
plt.xlabel('City name')
plt.show()
## what time should we display advertisements to maximize likehood of customers buying product?
all_data['Order Date'] = pd.to_datetime(all_data['Order Date'])## adding hour and min coloumn
all_data['Hour']= all_data['Order Date'].dt.hour
all_data['Minute']= all_data['Order Date'].dt.minute
all_data.head()
hours = [hour for hour, df in all_data.groupby('Hour')]
plt.plot(hours, all_data.groupby(['Hour']).count())
# all_data.groupby(['Hour']).count()
plt.xticks(hours)
plt.xlabel('Hour')
plt.ylabel('Number of Orders')
plt.grid()
plt.show()
## What products are most often sold together
all_data.head()
df = all_data[all_data['Order ID'].duplicated(keep = False)]
## this function allows us to find duplicated items
df ['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))
## this functions helps to group and join the coloumn that we want to see
df = df[['Order ID','Grouped']].drop_duplicates()
## dropping duplicates coloumns
df.head()
## this functions will help us to take decision and separate of how we
##identify of which products often sold in pair
from itertools import combinations
from collections import Counter
count = Counter()
for row in df['Grouped']:
    row_list = row.split(',')
    count.update(Counter(combinations(row_list, 2))   
# count.most_common(10)    
for key, value in count.most_common(10):
    print(key,value)
    ## what product sold the most? why do you think it sold the most    
all_data.head()
product_group= all_data.groupby('Product')
quantity_ordered = product_group.sum()['Quantity Ordered']
products= [product for product, df in product_group]
plt.bar(products,quantity_ordered)
plt.ylabel('Quantity Ordered')
plt.xlabel('Product')
plt.xticks(products,rotation= 'vertical',size = 8)
plt.show()
prices = all_data.groupby('Product').mean()['Price Each']
# print(prices)
fig, ax1 = plt.subplots()
ax2 = ax1.twinx()
ax1.bar(products, quantity_ordered,color = 'g')
ax2.plot(products, prices,'b-')
ax1.set_xlabel('Product Name')
ax1.set_ylabel('Quantity Ordered', color = 'g')
ax2.set_ylabel('Price($)',color = 'b')
ax1.set_xticklabels(products, rotation = 'vertical', size = 8)
plt.show()
