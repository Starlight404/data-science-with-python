########## numpy 2d array ###########

'''
objectives
# the basics and array creation in 2d
# indexing and slicing
# basic operations in 2d'''
# import numpy as np

# a = [[11,12,13],[21,22,23],[31,32,33]]

# A = np.array(a)

# x = A.ndim
# y = A.shape
# print(x)
# print(y)
'''
It's useful to think of "ndim" as the number of nested lists.
The first list represents the first dimension.
This list contains another set of lists.
This represents the second dimension or axes.
The number of lists the list contains does not have to do with the dimension but the
shape of the list.
As with the 1d array, the attribute "shape" returns a tuple.
Itâ€™s helpful to use the rectangular representation as well.
The first element in the tuple corresponds to the number of nested lists contained in
the original list or the number of rows in the rectangular representation, in this case 3.
The second element corresponds to the size of each of the nested lists or the number
of columns in the rectangular array 0.
The convention is to label this axis 0 and this axis 1 as follows.'''

## for accessing the matrix########
# a = [[11,12,13],[21,22,23],[31,32,33]]

# x = a[0,0:2]###for slicing the index, currently i am having a small error that i will look into later
# print(x)


###### matrix addition ######
# x = np.array([[1,0],[0,1]]) 
# y = np.array([[2,1],[1,2]])
# z = x + y;
# print(z)
'''
here z = [[1+2],[0+1],[0+1],[1+2]= [[3,1],[1,3]]'''

# x = np.array([[1,0],[0,1]]) 
# y = np.array([[2,1],[1,2]])
# z = x * y;
# print(z)
'''
here z =  x* y,,,,,,,,,,, [[1*2],[0*1],
                           [0*1],[1*2]]'''
######### matrix multiplication ###########
import numpy as np

a = np.array([[0,1,1],
              [1,0,1]])

b = np.array([[1,1],
              [1,1],
              [-1,1]])

c = np.dot(a,b)
print(c)
'''
here a*b = [0*1+1*1+1*(-1)=0 first row first col [0*1+1*1+1*1]= 2 first row 2nd col
                                                  
            [1*1+0*1+1*(-1)=0 2nd row first col] [1*1+0*1+1*1]=0 2nd row 2nd col ]
            out put =  [[0 2]
                        [0 2]]'''
